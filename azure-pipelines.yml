# mm HH DD MM DW
#  \  \  \  \  \__ Days of week
#   \  \  \  \____ Months
#    \  \  \______ Days
#     \  \________ Hours
#      \__________ Minutes
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    always: "true"
    branches:
      include:
        - main
        - feature/*

trigger:
  branches:
    include:
      - user/*
      - feature/*
      - epic/*
      - main
  paths:
    exclude:
      - Samples

resources:
  repositories:
  - repository: PipelineTemplates
    type: git
    name: VirtualMonoRepo/Vmr.PipelineTemplates
    ref: main
  - repository: Vmr_Dependency1
    type: git
    name: VirtualMonoRepo/Vmr.Dependency1
    ref: main
  - repository: Vmr_Dependency2
    type: git
    name: VirtualMonoRepo/Vmr.Dependency2
    ref: main
  - repository: Vmr_Service1
    type: git
    name: VirtualMonoRepo/Vmr.Service1
    ref: main

variables:
  - template: PipelineTemplates/Variables.yml@PipelineTemplates
    parameters:
      Major: 1
      Minor: 2
      Patch: 3
      PreRelease: "Preview.5"
      ${{ if contains(variables['Build.SourceBranch'], 'release') }}:
        IsRelease: 'true'
      ${{ if not(contains(variables['Build.SourceBranch'], 'release')) }}:
        IsRelease: 'false'

parameters:
  - name: poolImage
    displayName: Pool Image
    type: string
    default: ubuntu-latest
    values:
      - ubuntu-latest
      - ubuntu-22.04
      - ubuntu-20.04
      - windows-latest
      - windows-2022
      - windows-2019
      - macOS-latest
      - macOS-12
      - macOS-11
  
  - name: DotnetSdkVersions
    type: object
    default: 
      # - '6.x'
      - '7.x'
  
  - name: PackageFeed
    default: 'VirtualMonoRepo/VirtualMonoRepo_CI2'

  - name: CreateDebugArtifact
    displayName: Create Debug Artifact
    type: boolean
    default: 'true'

stages:
    - stage: Build
      dependsOn: []
      displayName: Build Everything
      
      jobs:
        # - job: PrepareBuild
        #   dependsOn: []
        #   displayName: Prepare Build
        #   pool:
        #     vmImage: ${{ parameters.PoolImage }}
        #   steps:
        #     - checkout: self
        #     - checkout: Vmr_Dependency1
        #     - checkout: Vmr_Dependency2
        #     - checkout: Vmr_Service1
        #     - pwsh: |
        #         $allProjectFiles = Get-ChildItem -Path . -Filter *.csproj -Recurse | Resolve-Path -Relative
        #         $webProjects = ""
        #         foreach ($projectFile in $allProjectFiles)
        #         {
        #             $content = Get-Content -Path $projectFile -Raw
        #             if($content.Contains("Microsoft.NET.Sdk.Web"))
        #             {
        #                 $webProjects = $webProjects + "," + $projectFile
        #             }
        #         }

        #         $webProjects = $webProjects.trimstart(",")
        #         Write-Host "##vso[task.setvariable variable=webprojects;isoutput=true]$webProjects"
        #       name: getWebProjects
        #       displayName: Create Solution File

        - job: 'Build'
          dependsOn: []
          displayName: Build Everything
          pool:
            vmImage: ${{ parameters.PoolImage }}
          variables:
            myWebProjects: $[ dependencies.PrepareBuild.outputs['getWebProjects.webprojects'] ]
            projectList: ${{ variables.myWebProjects }}
          # parameters:
          #   - name: parameterprojectList
          #     type: object
          #     default: $[ split(variables['projectList'], '.') ]
          steps:
            - checkout: self
            - checkout: Vmr_Dependency1
            - checkout: Vmr_Dependency2
            - checkout: Vmr_Service1

            # - ${{ each repo in resources.repositories }}:
            #   - pwsh: |
            #       Write-Host $(repo.name)
              
            - pwsh: |
                Write-Host "##vso[build.updatebuildnumber]$(SemanticVersion.SemanticVersion)"
              name: UpdateBuildNumber
              displayName: Update Build Number - $(SemanticVersion.SemanticVersion)
            
            - template: PipelineTemplates/Build/Steps/UseDotnetSdk.yml@PipelineTemplates
              parameters: 
                DotnetSdkVersions: ${{ parameters.DotnetSdkVersions }}

            - pwsh: |
                $allProjectFiles = Get-ChildItem -Path . -Filter *.csproj -Recurse | Resolve-Path -Relative
                dotnet new sln --name All --output .
                foreach ($projectFile in $allProjectFiles)
                {
                    dotnet sln All.sln add $projectFile
                }
                Write-Host "WebProjects"
                Write-Host $(myWebProjects)
                Copy-Item -Path $(Build.SourcesDirectory)\VirtualMonoRepo\Directory.Build.props -Destination $(Build.SourcesDirectory)\Directory.Build.props
                #Write-Host $(projectList)
                #Write-Host ${{ variables.webprojects }}
              displayName: Create Solution File

            # - ${{ each webproject in split(variables.myWebProjects, '.') }}:
            #   - pwsh: |
            #       Write-Host $(myWebProjects)
            #       #Write-Host $(webproject)
            #       Write-Host ${{ webproject }}
            #       Write-Host ${{ webproject.key }}
            #       Write-Host ${{ webproject.value }}
            #     displayName: Debug Web ${{ webproject }}

            - template: PipelineTemplates/Build/Steps/BuildDotnetSolution.yml@PipelineTemplates  
              parameters:
                SolutionToBuild: '*.sln'
                PackageFeed: ${{ parameters.PackageFeed }}

            - template: PipelineTemplates/Build/Steps/RunUnitTests.yml@PipelineTemplates 
              parameters:
                TestProjects:
                  - name: 'Unit Tests'
                    projects: '**/*.UnitTests.csproj'
                  - name: 'SpecFlow Tests'
                    projects: '**/*.Specs.csproj'
            
            - template: PipelineTemplates/Build/Steps/PublishCodeCoverage.yml@PipelineTemplates 

            - template: PipelineTemplates/Build/Steps/CreateArtifact.yml@PipelineTemplates 
              parameters:
                ArtifactName: 'NuGet'
                Contents: |
                  **/*.nupkg
                  **/*.snupkg
            
            - pwsh: |
                $allProjectFiles = Get-ChildItem -Path . -Filter *.csproj -Recurse | Resolve-Path -Relative
                foreach ($projectFile in $allProjectFiles)
                {
                    $content = Get-Content -Path $projectFile -Raw
                    if($content.Contains("Microsoft.NET.Sdk.Web"))
                    {
                        $projectName = (Get-Item $projectFile).BaseName
                        dotnet publish $projectFile --no-build -c Release -o $(Build.ArtifactStagingDirectory)/WebApplications/$projectName /p:UseAppHost=false
                    }
                }
              displayName: Publish Web Projects

            - task: PublishPipelineArtifact@1
              displayName: 'Publish Artifact: Web Applications'
              inputs:
                targetPath: '$(Build.ArtifactStagingDirectory)/WebApplications'
                artifact: 'Web Applications'
                publishLocation: 'pipeline'

            - ${{ if eq(parameters.CreateDebugArtifact, 'true') }}:
              - template: PipelineTemplates/CreateDebugArtifact.yml@PipelineTemplates
                parameters:
                  name: 'DEBUG_BUILD'              