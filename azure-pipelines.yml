# mm HH DD MM DW
#  \  \  \  \  \__ Days of week
#   \  \  \  \____ Months
#    \  \  \______ Days
#     \  \________ Hours
#      \__________ Minutes
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    always: "true"
    branches:
      include:
        - main
        - feature/*

trigger:
  branches:
    include:
      - user/*
      - feature/*
      - epic/*
      - main
  paths:
    exclude:
      - Samples

resources:
  repositories:
  - repository: PipelineTemplates
    type: git
    name: VirtualMonoRepo/Vmr.PipelineTemplates
    ref: main
  - repository: Vmr_Dependency1
    type: git
    name: VirtualMonoRepo/Vmr.Dependency1
    ref: main
  - repository: Vmr_Dependency2
    type: git
    name: VirtualMonoRepo/Vmr.Dependency2
    ref: main
  - repository: Vmr_Service1
    type: git
    name: VirtualMonoRepo/Vmr.Service1
    ref: main

variables:
  - template: PipelineTemplates/Variables.yml@PipelineTemplates
    parameters:
      Major: 1
      Minor: 2
      Patch: 3
      PreRelease: "Preview.5"
      ${{ if contains(parameters['BuildRelease'], 'true') }}:
        IsRelease: 'true'
      ${{ if contains(parameters['BuildRelease'], 'false') }}:
        IsRelease: 'false'

parameters:
  - name: poolImage
    displayName: Pool Image
    type: string
    default: ubuntu-latest
    values:
      - ubuntu-latest
      - ubuntu-22.04
      - ubuntu-20.04
      - windows-latest
      - windows-2022
      - windows-2019
      - macOS-latest
      - macOS-12
      - macOS-11

  - name: BuildRelease
    displayName: Build Release
    type: boolean
    default: 'false'

  - name: CreateDebugArtifact
    displayName: Create Debug Artifact
    type: boolean
    default: 'false'

  - name: DotnetSdkVersions
    type: object
    default: 
      # - '6.x'
      - '7.x'
  
  - name: PackageFeed
    default: 'VirtualMonoRepo/VirtualMonoRepo_CI2'

stages:
    - stage: Build
      dependsOn: []
      displayName: Build Everything
      
      jobs:
        - job: 'Build'
          dependsOn: []
          displayName: Build Everything
          pool:
            vmImage: ${{ parameters.PoolImage }}
         
          steps:
            - checkout: Vmr_Dependency1
              path: code/Vmr.Dependency1
              persistCredentials: true

            - checkout: Vmr_Dependency2
              path: code/Vmr.Dependency2
              persistCredentials: true
            
            - checkout: Vmr_Service1
              path: code/Vmr.Service1
              persistCredentials: true
            
            - pwsh: |
                Write-Host "##vso[build.updatebuildnumber]$(SemanticVersion.SemanticVersion)"
              name: UpdateBuildNumber
              displayName: Update Build Number - $(SemanticVersion.SemanticVersion)

            - pwsh: |
                $repoDirectories = Get-ChildItem -Directory -Force $(Agent.BuildDirectory)/code
                foreach($repoDir in $repoDirectories)
                {
                  Copy-Item -Path $repoDir -Destination $(Build.SourcesDirectory) -Recurse
                }
              displayName: Copy source to build folder

            - pwsh: |
                git config --global user.email 'releasebuild@dogtail.se'
                git config --global user.name 'ReleaseBuild'
                git config --global init.defaultBranch main

                $gitFolders = Get-ChildItem -Directory -Force -Recurse *.git | Resolve-Path -Relative
                foreach ($gitFolder in $gitFolders)
                {
                  Remove-Item -Force -Recurse -Path $gitFolder
                }

                git init
                git remote add origin https://build:$(System.AccessToken)@dogtail.visualstudio.com/DefaultCollection/VirtualMonoRepo/_git/VirtualMonoRepo 
                git pull origin main --allow-unrelated-histories
                git checkout -b release/$(Build.BuildNumber)
              displayName: Create build branch

            # - task: PublishPipelineArtifact@1
            #   displayName: Publish d3js
            #   inputs:
            #     targetPath: '$(Build.SourcesDirectory)/d3js.html'
            #     artifact: 'd3js'
            #     publishLocation: 'pipeline'



            - template: PipelineTemplates/Build/Steps/UseDotnetSdk.yml@PipelineTemplates
              parameters: 
                DotnetSdkVersions: ${{ parameters.DotnetSdkVersions }}

            - pwsh: |
                $allProjectFiles = Get-ChildItem -Path . -Filter *.csproj -Recurse | Resolve-Path -Relative
                dotnet new sln --name All --output .
                foreach ($projectFile in $allProjectFiles)
                {
                    dotnet sln All.sln add $projectFile
                }

                Copy-Item -Path $(Build.SourcesDirectory)\VirtualMonoRepo\* -Destination $(Build.SourcesDirectory)\ -Recurse
              displayName: Create Solution File

            - template: PipelineTemplates/Build/Steps/BuildDotnetSolution.yml@PipelineTemplates  
              parameters:
                SolutionToBuild: '*.sln'
                PackageFeed: ${{ parameters.PackageFeed }}

            - template: PipelineTemplates/Build/Steps/RunUnitTests.yml@PipelineTemplates 
              parameters:
                TestProjects:
                  - name: 'Unit Tests'
                    projects: '**/*.UnitTests.csproj'
                  - name: 'SpecFlow Tests'
                    projects: '**/*.Specs.csproj'
            
            - template: PipelineTemplates/Build/Steps/PublishCodeCoverage.yml@PipelineTemplates 

            - template: PipelineTemplates/Build/Steps/CreateArtifact.yml@PipelineTemplates 
              parameters:
                ArtifactName: 'NuGet'
                Contents: |
                  **/*.nupkg
                  **/*.snupkg
            
            - pwsh: |
                $allProjectFiles = Get-ChildItem -Path . -Filter *.csproj -Recurse | Resolve-Path -Relative
                foreach ($projectFile in $allProjectFiles)
                {
                    $content = Get-Content -Path $projectFile -Raw
                    if($content.Contains("Microsoft.NET.Sdk.Web"))
                    {
                        $projectName = (Get-Item $projectFile).BaseName
                        dotnet publish $projectFile --no-build -c Release -o $(Build.ArtifactStagingDirectory)/WebApplications/$projectName /p:UseAppHost=false
                    }
                }
              displayName: Publish Web Projects

            - task: PublishPipelineArtifact@1
              displayName: 'Publish Artifact: Web Applications'
              inputs:
                targetPath: '$(Build.ArtifactStagingDirectory)/WebApplications'
                artifact: 'Web Applications'
                publishLocation: 'pipeline'
            
            - ${{ if contains(parameters['BuildRelease'], 'true') }}:
              - pwsh: |
                  git add .
                  git commit -m "Release-$(Build.BuildNumber)"
                  git push --set-upstream origin release/$(Build.BuildNumber) 
                displayName: "Create Release Branch"
              
              - pwsh: |
                  $repoDirectories = Get-ChildItem -Directory -Force $(Agent.BuildDirectory)/code
                  foreach($repoDir in $repoDirectories)
                  {
                    cd $repoDir
                    git tag -a $(Build.BuildNumber) -m $(Build.BuildNumber)
                    git push origin $(Build.BuildNumber)
                  }
                displayName: "Create Release Tags"

            - pwsh: |
                $allProjectFiles = Get-ChildItem -Path . -Filter *.csproj -exclude *.UnitTests.csproj, *.Specs.csproj -Recurse | Resolve-Path -Relative
                
                $projects = @()
                
                foreach ($projfile in $allProjectFiles)
                {
                    
                    $projectReferences = Select-Xml -Path $projfile -XPath '/Project/ItemGroup/ProjectReference' | ForEach-Object { $_.Node.Include }
                    # write-host $projfile
                    # write-host $t
                    # write-host 
                
                    $projectReferencesArray = @()
                    foreach($projRef in $projectReferences)
                    {
                        $t = $projRef -split "\\"#[IO.Path]::PathSeparator
                        $r = $t[$t.Length-1].replace(".csproj","")
                        $projectReferencesArray += $r
                    }
                
                    Write-Host $r
                
                    $type = "none"
                
                    $content = Get-Content -Path $projfile -Raw
                    if($content.Contains("Microsoft.NET.Sdk.Web"))
                    {
                      $type = "Web"
                    }
                    elseif ($content.Contains("Microsoft.NET.Sdk")) {
                      $type = "Library"
                    }
                
                    $project = @{
                        Project = (Get-Item $projfile).Basename
                        Type = $type
                        References = $projectReferencesArray
                    }
                
                    $projects += $project
                    
                }
                
                $nodes = @()
                $links = @()
                foreach($p in $projects)
                {
                    $nodes += @{
                      id = $p.Project
                      type = $p.Type
                    }
                
                    Write-Host "proj: " + $p.Project
                    foreach($r in $p.References)
                    {
                        $links += @{
                            from=$p.Project
                            to=$r
                        }
                        Write-Host "   ref: " + $r
                    }
                    Write-Host
                }
                
                $root = @{
                    nodes = $nodes
                    links = $links
                }
                $json = $root | ConvertTo-Json #| Out-File -FilePath .\d3js.json
                Write-Host $json;
                
                $htmlStart = @'
                <!DOCTYPE html>
                <meta charset="utf-8" />
                <style>
                  .link {
                    stroke: #ccc;
                  }
                
                  .node text {
                    pointer-events: none;
                    font: 10px sans-serif;
                  }
                </style>
                <body>
                  <script src="https://d3js.org/d3.v3.min.js"></script>
                  <script>
                    var width = 960,
                      height = 500;
                
                    var svg = d3
                      .select("body")
                      .append("svg")
                      .attr("width", width)
                      .attr("height", height);
                
                    var force = d3.layout
                      .force()
                      .gravity(0.05)
                      .distance(100)
                      .charge(-100)
                      .size([width, height]);
                
                      var json = 
                '@
                
                $htmlStop = @'
                
                var linkMap = json.nodes.map((node) => node.id);
                var edges = json.links.map((link) => {
                  return {
                    source: linkMap.indexOf(link.from),
                    target: linkMap.indexOf(link.to),
                  };
                });
                force
                  .nodes(json.nodes)
                  .links(edges)
                  //   .id((node) => {
                  //     return node.id;
                  //   })
                  .start();
                
                var link = svg
                  .selectAll(".link")
                  .data(edges)
                  .enter()
                  .append("line")
                  .attr("class", "link");
                
                var node = svg
                  .selectAll(".node")
                  .data(json.nodes)
                  .enter()
                  .append("g")
                  .attr("class", "node")
                  .call(force.drag);
                
                node
                  .append("image")
                  //.attr("xlink:href", "https://github.com/favicon.ico")
                  .attr("xlink:href", (d) => {
                    if (d.type === "Web") {
                      return "https://github.com/favicon.ico";
                    } else if (d.type === "Library") {
                      return "https://dn.se/favicon.ico";
                    }
                  })
                  .attr("x", -8)
                  .attr("y", -8)
                  .attr("width", 16)
                  .attr("height", 16);
                
                node
                  .append("text")
                  .attr("dx", 12)
                  .attr("dy", ".35em")
                  .text(function (d) {
                    return d.id;
                  });
                
                force.on("tick", function () {
                  link
                    .attr("x1", function (d) {
                      return d.source.x;
                    })
                    .attr("y1", function (d) {
                      return d.source.y;
                    })
                    .attr("x2", function (d) {
                      return d.target.x;
                    })
                    .attr("y2", function (d) {
                      return d.target.y;
                    });
                
                  node.attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                  });
                });
                </script>
                </body>
                '@
                
                $html = $htmlStart + $json + $htmlStop;
                Write-Host $html
                
                $html | Out-File -FilePath $(Build.SourcesDirectory)/DependencyGraph.html  

            - task: PublishHtmlReport@1
              displayName: 'Publish HTML Report'
              inputs:
                reportDir: $(Build.SourcesDirectory)/DependencyGraph.html

            - ${{ if eq(parameters.CreateDebugArtifact, 'true') }}:
              - template: PipelineTemplates/CreateDebugArtifact.yml@PipelineTemplates
                parameters:
                  name: 'DEBUG_BUILD'              